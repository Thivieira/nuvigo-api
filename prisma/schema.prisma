// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  password           String
  name               String?
  emailVerified      Boolean              @default(false)
  chats              Chat[]
  refreshTokens      RefreshToken[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  VerificationToken  VerificationToken[]
  PasswordResetToken PasswordResetToken[]
  ChatSession        ChatSession[]
}

// Represents a distinct conversation or time block
model ChatSession {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Link to the user who owns the session
  title     String? // Optional title for the session (e.g., first query)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chats     Chat[] // Relation to all chats within this session

  @@index([userId])
  @@index([userId, updatedAt]) // Index for finding the latest session for a user
}

model Chat {
  id              String      @id @default(uuid())
  chatSessionId   String // Foreign key to ChatSession
  chatSession     ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade) // Link to the parent session
  location        String
  temperature     String
  condition       String
  naturalResponse String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  User            User?       @relation(fields: [userId], references: [id])
  userId          String?

  @@index([chatSessionId]) // Index on the session ID
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}
